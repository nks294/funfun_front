<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.first.funfun.mapper.ProjectMapper">

	<insert id="insertProject" parameterType="com.first.funfun.dto.ProjectDTO">
		insert into project (id, userid, title, done)
   				  values ( #{id}||to_char(Project_seq.nextval,9999),
   				   		   #{userid},
   				   		   #{title},
   				   		   #{done} 
   				   		   )
	</insert>
	
	<select id="getProjectList" resultType="com.first.funfun.dto.ProjectDTO">
		
		<![CDATA[
		SELECT p.*, a.article_title, u.user_nickname FROM projects p
			LEFT JOIN articles a ON p.project_id = a.article_id
			LEFT JOIN member u ON p.project_author = u.user_email
			WHERE p.project_open <= NOW()
			AND p.project_expiration > NOW()
		]]>
    		
	</select>
	
	<select id="getViewList" resultType="com.first.funfun.dto.ProjectDTO">
		
		<![CDATA[
		SELECT p.*, a.article_title, u.user_nickname FROM projects p
			LEFT JOIN articles a ON p.project_id = a.article_id
			LEFT JOIN member u ON p.project_author = u.user_email
			WHERE p.project_open <= NOW()
			AND p.project_expiration > NOW()
			ORDER BY p.project_view DESC
		]]>
    		
	</select>
	
	<select id="getProjectSearch" parameterType="map" resultType="com.first.funfun.dto.ProjectDTO"> 
		
		<![CDATA[
		SELECT *
			FROM projects p
			LEFT JOIN articles a ON p.project_id = a.article_id
			LEFT JOIN member u ON p.project_author = u.user_email
			WHERE (p.project_name LIKE '%' || #{searchTerm} || '%'
				OR a.article_title LIKE '%' || #{searchTerm} || '%')
				AND p.project_open <= NOW()
				AND p.project_expiration > NOW()
			ORDER BY 
        		CASE 
        		    WHEN #{sortBy} = 'upload' THEN UNIX_TIMESTAMP(p.project_upload)
        		    WHEN #{sortBy} = 'likes' THEN p.PROJECT_likes
        		    WHEN #{sortBy} = 'fun' THEN p.PROJECT_fun
        		END DESC
		]]>
		
	</select>
	
	<select id="getProjectDiscover" parameterType="map" resultType="com.first.funfun.dto.ProjectDTO"> 
		
		<![CDATA[
		SELECT *
			FROM projects p
			LEFT JOIN articles a ON p.project_id = a.article_id
			LEFT JOIN member u ON p.project_author = u.user_email
			WHERE ( p.project_open <= NOW() AND p.project_expiration > NOW() )
                AND p.project_maincate = #{main}
                AND (
                  #{sub} = 'all'
                  OR p.project_subcate = #{sub}
                )
			ORDER BY 
        		CASE 
        		    WHEN #{sortBy} = 'upload' THEN UNIX_TIMESTAMP(p.project_upload)
        		    WHEN #{sortBy} = 'likes' THEN p.PROJECT_likes
        		    WHEN #{sortBy} = 'fun' THEN p.PROJECT_fun
        		END DESC
		]]>
		
	</select>
	
	<select id="getPopularList" parameterType="map" resultType="com.first.funfun.dto.ProjectDTO">
		
		<![CDATA[
		SELECT *
			FROM projects p
			LEFT JOIN articles a ON p.project_id = a.article_id
			LEFT JOIN member u ON p.project_author = u.user_email
			WHERE p.project_open <= NOW()
			AND p.project_expiration > NOW()
			ORDER BY 
        		CASE 
        		    WHEN #{sortBy} = 'likes' THEN p.project_likes
        		    WHEN #{sortBy} = 'fun' THEN p.project_fun
        		END DESC
		]]>
    		
	</select>
	
	<select id="getRecentList" resultType="com.first.funfun.dto.ProjectDTO">
		
		<![CDATA[
		SELECT p.*, a.article_title, u.user_nickname FROM projects p
			LEFT JOIN articles a ON p.project_id = a.article_id
			LEFT JOIN member u ON p.project_author = u.user_email
			WHERE p.project_open <= NOW()
			AND p.project_expiration > NOW()
			ORDER BY p.project_open DESC
		]]>
    		
	</select>
	
	<select id="getReadyList" resultType="com.first.funfun.dto.ProjectDTO">
		
		SELECT p.*, a.article_title, u.user_nickname FROM projects p
			LEFT JOIN articles a ON p.project_id = a.article_id
			LEFT JOIN member u ON p.project_author = u.user_email
			WHERE p.project_open > NOW()
			ORDER BY p.project_open ASC
    		
	</select>
	
	<select id="getPremiumList" resultType="com.first.funfun.dto.ProjectDTO">
		
		<![CDATA[
		SELECT p.*, a.article_title, u.user_nickname FROM projects p
			LEFT JOIN articles a ON p.project_id = a.article_id
			LEFT JOIN member u ON p.project_author = u.user_email
			WHERE p.project_premium = 1
			AND p.project_open <= NOW()
			AND p.project_expiration > NOW()
			ORDER BY RAND()
		]]>
    		
	</select>
	
	<select id="getProjectRank" resultType="com.first.funfun.dto.ProjectDTO"> 
		
		<![CDATA[
            SELECT *
            FROM (
                SELECT p.*, a.article_title, u.user_nickname,
                DENSE_RANK() OVER (ORDER BY p.project_likes DESC, p.project_fun DESC, p.project_upload) AS projectRank
                FROM projects p
                LEFT JOIN articles a ON p.project_id = a.article_id
                LEFT JOIN member u ON p.project_author = u.user_email 
                WHERE p.project_open <= NOW()
                AND p.project_expiration > NOW()
            ) AS subquery
            WHERE projectRank <= 10
		]]>
		
	</select>
	
	<select id="getProject" parameterType="string" resultType="com.first.funfun.dto.ProjectDTO">
	
		select * from projects where project_id = #{id}
		
	</select>
	
	
	<update id="updateProject" parameterType="com.first.funfun.dto.ProjectDTO">
	
		update projects set title = #{title}, done = #{done} 
				    where project_id = #{id} 
				    
	</update>
	
	<delete id="deleteProject" parameterType="string">
	
		delete from projects where project_id = #{id}
	
	</delete>
	
	
</mapper>	
